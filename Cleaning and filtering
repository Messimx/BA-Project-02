#libraries
library(dataQualityR)
library(ggplot2)
library(lubridate)
library(stringr)
library(dplyr)
library(magrittr)
#loading the files
options(scipen = 999)
countries="/Users/sujay/Desktop/NYU/BA Assignments/Airbnb Data/countries.csv"
age_gender="/Users/sujay/Desktop/NYU/BA Assignments/Airbnb Data/age_gender_bkts.csv"
sessions_df="/Users/sujay/Desktop/NYU/BA Assignments/Airbnb Data/sessions.csv"
test_user="/Users/sujay/Desktop/NYU/BA Assignments/Airbnb Data/test_users.csv"
train_users="/Users/sujay/Desktop/NYU/BA Assignments/Airbnb Data/train_users_2.csv"
countries_df=read.csv(countries,stringsAsFactors = F,header = T)
age_gender_df=read.csv(age_gender,stringsAsFactors = F,header = T)
sessions_df=read.csv(sessions_df,stringsAsFactors = F,header = T)
test_user_df=read.csv(test_user,stringsAsFactors = F,header = T)
train_users_df=read.csv(train_users,stringsAsFactors = F,header = T)

#setting the lables right
label_train = train_users_df[, c('id', 'country_destination')]
label_test = test_user_df[, c('id')]
names(sessions_df)[1] <- "id"
#adding country column in test before merging
test_user_df$country_destination = NA
#clean date
train_users_df$date_account_created=as.Date(train_users_df$date_account_created,"%Y-%m-%d")
test_user_df$date_account_created=as.Date(test_user_df$date_account_created,"%Y-%m-%d")
#clean timestamp
train_users_df$timestamp_first_active=(ymd_hms(train_users_df$timestamp_first_active,locale = Sys.getlocale("LC_TIME")))
test_user_df$timestamp_first_active=(ymd_hms(test_user_df$timestamp_first_active,locale = Sys.getlocale("LC_TIME")))
#dropping values before 2013
train_subset <- subset(train_users_df, as.integer(substr(date_account_created,1,4)) >= 2013)
#merging
new_df=rbind(train_subset,test_user_df)
#remove date of first booking
new_df<-new_df[-4]
#age cleaning
new_df<- new_df%>%
  dplyr::mutate(
    age = ifelse(age >= 1920, 2015 - age, age),
    age = ifelse(age < 14 | age > 100, -1, age))

new_df$age[is.na(new_df$age)] <- median(new_df$age, na.rm=TRUE)

new_df<-new_df[!new_df$age<16,]
#age bucketing
new_df<- new_df%>%
  dplyr::mutate(
    age_bucket = cut(age, breaks = c(1, 4, 9, 14, 19, 24,
                                     29, 34, 39, 44, 49, 54,
                                     59, 64, 69, 74, 79, 84,
                                     89, 94, 99, 105)),
    age_bucket = plyr::mapvalues(age_bucket,
                                 from=c("(1,4]", "(4,9]", "(9,14]", "(14,19]",
                                        "(19,24]", "(24,29]", "(29,34]", "(34,39]",
                                        "(39,44]", "(44,49]", "(49,54]", "(54,59]",
                                        "(59,64]", "(64,69]", "(69,74]", "(74,79]",
                                        "(79,84]", "(84,89]", "(89,94]", "(94,99]", "(99,105]"),
                                 to=c("0-4", "5-9", "10-14", "15-19",
                                      "20-24", "25-29", "30-34", "35-39",
                                      "40-44", "45-49", "50-54", "55-59",
                                      "60-64", "65-69", "70-74", "75-79",
                                      "80-84", "85-89", "90-94", "95-99", "100+")))
#removing all NA country destination rows
new_df=new_df[!is.na(new_df$country_destination),]

#dataquality
num.file <- paste(tempdir(), "/dq_num.csv", sep= "")
cat.file <- paste(tempdir(), "/dq_cat.csv", sep= "")
checkDataQuality(data= new_df, out.file.num= num.file, out.file.cat= cat.file)
df_num=read.csv(num.file)
df_cat=read.csv(cat.file)
#session
str(sessions_df)
#checking for NA values 
sum(is.na(sessions_df$secs_elapsed))
#inputting session NA values
sessions_df$secs_elapsed[is.na(sessions_df$secs_elapsed)] <- mean(na.omit(sessions_df$secs_elapsed))
#merging
session_unique <- sessions_df %>% group_by(id) %>% summarize(totalActions = length(action), 
                                                               uniqueActions = length(unique(action)),
                                                               uniqueAction_type=length(unique(action_type)),
                                                               uniqueAction_detail=length(unique(action_detail)),   
                                                               freqAction_detail=names(which.max(table(action_detail))),
                                                               device = names(which.max(table(device_type))),
                                                               time_sec = sum(secs_elapsed))
#merging sessions data and with train data
new_df=merge(new_df,session_unique,"id")

#dataquality
num.file <- paste(tempdir(), "/dq_num.csv", sep= "")
cat.file <- paste(tempdir(), "/dq_cat.csv", sep= "")
checkDataQuality(data= new_df, out.file.num= num.file, out.file.cat= cat.file)
df_num=read.csv(num.file)
df_cat=read.csv(cat.file)

#replacing missing values
new_df$freqAction_detail[new_df$freqAction_detail==""]="-unkown-"
new_df$first_affiliate_tracked[new_df$first_affiliate_tracked==""]="-unkown-"
